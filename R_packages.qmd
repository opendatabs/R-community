---
title: "Wie erstelle ich ein R-package"
subtitle: "Eine simple Einf√ºhrung"
format: 
  html:
    embed-resources: true
    self-contained-math: true
    css: styles.css
    mainfont: Inter
editor: visual
toc: true
toc-depth: 2
toc-title: Inhalt
execute: 
  echo: true      # hide code
  warning: false   # suppress warnings
  message: false   # suppress messages
---

## Einf√ºhrung

Ein **R-Package** ist eine strukturierte Sammlung von Funktionen, Datens√§tzen und Dokumentation, die gemeinsam eine bestimmte Funktionalit√§t bereitstellen.\
Fast alles, was man in R nutzt (z. B. `ggplot2`, `dplyr`, `stringr`, `tidyverse`), ist ein Package.

R-Packages dienen dazu, wiederverwendbaren Code in einer klar definierten Struktur zu organisieren, zu dokumentieren und weiterzugeben. Dies ist besonders n√ºtzlich, wenn man Funktionen mehrfach nutzt, Projekte gemeinsam bearbeitet oder eigene Tools f√ºr andere entwickeln m√∂chte.


### CRAN

CRAN steht f√ºr **Comprehensive R Archive Network** und ist das zentrale Verzeichnis und Distributionsnetzwerk f√ºr R-Pakete. Man kann es sich vorstellen wie den ‚ÄûApp Store‚Äú oder ‚ÄûPlay Store‚Äú f√ºr R-Pakete. CRAN hostet offizielle, gepr√ºfte R-Packages (z. B. ggplot2, dplyr, tidyr, etc.).

#### Wof√ºr braucht man CRAN?

Mit dem Code `install.packages("ggplot2")` l√§dt R das Paket `ggplot2` automatisch von CRAN herunter, kompiliert es (wenn n√∂tig) und installiert es lokal.

#### Wie funktioniert CRAN?

CRAN ist kein einzelner Server, sondern ein Netzwerk aus Spiegelservern (Mirrors) auf der ganzen Welt. Wenn du ein Paket installierst, w√§hlt R automatisch den geografisch n√§chstgelegenen Mirror, um schnell herunterzuladen.

#### Vor- und Nachteile von CRAN

| **Vorteile** | **Nachteile** |
| ------------- | ------------- |
| Hohe Sichtbarkeit und einfache Installation √ºber `install.packages()` | Strenge Einreichungs- und Pr√ºfungsrichtlinien |
| Automatische Updates und zuverl√§ssige Verf√ºgbarkeit | Langer und teils komplexer Ver√∂ffentlichungsprozess |
| Qualit√§tssicherung durch umfangreiche Tests auf verschiedenen Systemen | Wenig Flexibilit√§t f√ºr schnelle √Ñnderungen oder experimentelle Versionen |

#### Alternativen zu CRAN

- *GitHub* (schnelle und flexible Ver√∂ffentlichung von Paketen)
- *GitLab* (√§hnlich wie GitHub, aber f√ºr interne Projekte oder Firmen-Repos)
- *tar.gz* (Ein komprimiertes Archiv, das viele Dateien, wie beispielsweise ein R-Package mit Unterordnern, enth√§lt und weniger Speicher ben√∂tigt; Paket kann lokal kompiliert und als Datei geteilt werden)

------------------------------------------------------------------------


## Erstellung eines R-Packages

Im Folgenden findest du eine Schritt-f√ºr-Schritt-Anleitung, wie du in **RStudio** ein eigenes Package erstellst ‚Äì als *tar.gz* oder f√ºr die Ver√∂ffentlichung auf *GitHub*.

```{r eval=FALSE}
# ==============================
# Minimal Base-R Package Script
# ==============================


# --- 0. Install Packages ---
pacman::p_load("roxygen2", "remotes")


# --- 1. Define paths and create R folder ---
pkg_name <- "PackageName"
pkg_path <- file.path("Package/Ablage/Pfad", pkg_name)          # <-- replace with your package folder path
output_path <- file.path("Package/Output/tar.gz/Pfad")          # <-- replace with desired output folder
dir.create(pkg_path, showWarnings = FALSE, recursive = TRUE)
dir.create(output_path, showWarnings = FALSE, recursive = TRUE)
r_path <- file.path(pkg_path, "R")
dir.create(r_path, showWarnings = FALSE, recursive = TRUE)


# --- 2. Create DESCRIPTION ---
desc <- sprintf("
Package: %s
Type: Package
Title: Minimal Base-R Example Package
Version: 0.1.0
Author: Max Mustermann
Maintainer: Max Mustermann <max@example.com>
Description: Minimal package example using only base R.
License: MIT
Encoding: UTF-8
LazyData: true
", pkg_name)
writeLines(desc, con = file.path(pkg_path, "DESCRIPTION")) # write DESCRIPTION


# --- 3. Add package content ---
package_content <- "
#' violet4
#'
#' violet colours palette with four colors.
#'
#' @format A vector of color hex codes.
#' @export
violet4 <- rev(c('#2E1235', '#662673', '#B375AB', '#E7CEE2'))

#' yellow4
#'
#' yellow colours palette with four colors.
#'
#' @format A vector of color hex codes.
#' @export
yellow4 <- rev(c('#45381D', '#7F5F1A', '#CD9C00', '#FFDA80'))

#' stacked_bar
#'
#' Create a stacked bar plot using ggplot2.
#'
#' @param data Data frame containing the variables to plot
#' @param x_axis Column name for x-axis values
#' @param y_axis Column name for y-axis values
#' @param title Plot title
#' @param legend_title Legend title
#' @param x_label X-axis label
#' @param y_label Y-axis label
#' @param color Vector with hex code colors
#'
#' @return A ggplot object
#' @examples
#' # stacked_bar(df, 'category', 'value', 'Title', 'Legend', 'X', 'Y', c('#123456','#654321'))
#' @export
stacked_bar <- function(data, x_axis, y_axis, title, legend_title,
                        x_label, y_label, color) {
  ggplot(data, aes_string(x = x_axis, y = y_axis, fill = legend_title)) +
    geom_bar(stat = 'identity') +
    scale_fill_manual(values = color) +
    labs(
      title = title,
      x = x_label,
      y = y_label,
      fill = legend_title
    ) +
    theme_minimal()
}
"

# Write package content into R/ directory
writeLines(package_content, con = file.path(r_path, "script_for_package_content.R"))


# --- 4. Generate documentation and NAMESPACE from Roxygen comments ---
# Path to the NAMESPACE file
ns_file <- file.path(pkg_path, "NAMESPACE")

# If an old NAMESPACE exists, delete it first
if (file.exists(ns_file)) {
  file.remove(ns_file)
  cat("üßπ Old NAMESPACE file removed.\n")
}

# Now regenerate documentation and NAMESPACE from current Roxygen comments
roxygen2::roxygenise(pkg_path)


# --- 5. Test functions ---
r_files <- list.files(r_path, full.names = TRUE)
for(f in r_files) source(f)

violet4


# --- 6. Build the package in the output folder ---
old_wd <- getwd()              # save current working directory
setwd(output_path)             # switch to output folder
system(paste("R CMD build", shQuote(pkg_path)))  # builds tar.gz here
setwd(old_wd)                  # return to original working directory


# --- 7.Install and load package ---
# Locally via tar.gz file:
detach("package:PackageName", unload = TRUE, character.only = TRUE) # or restart the R session
install.packages(file.path("Pfad/zum/tag.gz file"), repos = NULL, type = "source")
library(TestPackage)

# Remote via github:
detach("package:PackageName", unload = TRUE, character.only = TRUE) # or restart the R session
remotes::install_github("githubusername/PackageName")
library(TestPackage)
```


## Wie sieht die Ordnerstruktur des Packages aus:

```
TestPackage/                     # (Hauptordner deines Packages)
‚îú‚îÄ‚îÄ R/                           # (enth√§lt alle R-Skripte mit deinen Funktionen)
‚îÇ   ‚îî‚îÄ‚îÄ script_for_package_content.R            # (Enth√§lt die Funktionen)
‚îÇ
‚îú‚îÄ‚îÄ man/                         # (automatisch generierte Hilfeseiten im .Rd-Format)
‚îÇ   ‚îî‚îÄ‚îÄ stacked_bar.Rd           # (z.B. Hilfe-Datei zur Funktion 'stacked_bar()')
‚îÇ
‚îú‚îÄ‚îÄ DESCRIPTION                  # (Metadaten-Datei: Name, Version, Autor, Imports, Lizenz etc.)
‚îÇ
‚îî‚îÄ‚îÄ NAMESPACE                    # In diesem Dokument werden die Funktionen exportiert, damit sie im Package verwendet werden k√∂nnnen.
```


## Wie kommt das Package auf github?

- In github ein neues und √∂ffentliches repository mit dem Packagenamen anlegen
- GitBash in Package directory, also dort wo das Package liegt (pkg_pfad in Beispielcode)

```bash
git init
git add .
git commit -m "commit message"
git remote add origin https://github.com/username/PackageName.git
git branch -M main
git push -u origin main
```


## Beispiele f√ºr Package Use

### Ohne Package:

```{r}
# Load ggplot2
library(ggplot2)

# Create a simple dataset
data <- data.frame(
  Group = rep(paste("Group", 1:5), each = 4),
  Category = rep(c("A", "B", "C", "D"), times = 5),
  Value = c(5, 3, 4, 2,
            6, 2, 3, 5,
            4, 4, 5, 1,
            3, 6, 2, 4,
            7, 2, 4, 3)
)

# Stacked bar plot with custom colors
ggplot(data, aes(x = Group, y = Value, fill = Category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("A" = "#1f77b4",  # blue
                               "B" = "#ff7f0e",  # orange
                               "C" = "#2ca02c",  # green
                               "D" = "#d62728")) +  # red
  labs(title = "Stacked Bar Plot with Custom Colors",
       x = "Group",
       y = "Value") +
  theme_minimal()
```

### Mit Package:

```{r}
# Load ggplot2
library(ggplot2)
# Remote via github:
remotes::install_github("guitarfly/TestPackage")
library(TestPackage)


# Create a simple dataset
data <- data.frame(
  Group = rep(paste("Group", 1:5), each = 4),
  Category = rep(c("A", "B", "C", "D"), times = 5),
  Value = c(5, 3, 4, 2,
            6, 2, 3, 5,
            4, 4, 5, 1,
            3, 6, 2, 4,
            7, 2, 4, 3)
)

# Stacked bar plot with custom colors
ggplot(data, aes(x = Group, y = Value, fill = Category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = TestPackage::violet4) +  # Dynamische Farben aus Package
  labs(title = "Stacked Bar Plot with Custom Colors",
       x = "Group",
       y = "Value") +
  theme_minimal()
```

Oder sogar:
```{r}
# Load ggplot2
library(ggplot2)
# Remote via github:
remotes::install_github("guitarfly/TestPackage")
library(TestPackage)


# Create a simple dataset
data <- data.frame(
  Group = rep(paste("Group", 1:5), each = 4),
  Category = rep(c("A", "B", "C", "D"), times = 5),
  Value = c(5, 3, 4, 2,
            6, 2, 3, 5,
            4, 4, 5, 1,
            3, 6, 2, 4,
            7, 2, 4, 3)
)

# Stacked bar plot with custom plot and color function
stacked_bar(
  data = data,
  x_axis = "Group",
  y_axis = "Value",
  title = "Stacked Bar Plot with Custom Colors",
  legend_title = "Category",
  x_label = "Group",
  y_label = "Value",
  color = TestPackage::yellow4
)
```


## Vor- und Nachteile von R-Packages

### Vorteile
-   **Wiederverwendbarer Code:** Einmal entwickelt, √ºberall einsetzbar\
-   **Saubere Struktur:** Funktionen, Tests, Daten, Dokumentation klar getrennt\
-   **Einfache Weitergabe:** Auf GitHub oder CRAN teilbar\
-   **Qualit√§tssicherung:** Dokumentation und Tests verbessern Zuverl√§ssigkeit\
-   **Versionierung:** Erm√∂glicht reproduzierbare Analysen und stabile Releases

### Nachteile
-   **H√∂herer Initialaufwand:** Einrichtung, Dokumentation und Tests ben√∂tigen Zeit\
-   **Komplexit√§t:** F√ºr kleine Projekte eventuell √ºberdimensioniert\


## Fazit

Das Erstellen eigener R-Packages ist ein professioneller Weg, um R-Code strukturiert, dokumentiert und wiederverwendbar zu gestalten. Auch wenn der Einstieg etwas Aufwand erfordert, bietet diese Vorgehensweise langfristig klare Vorteile in Bezug auf Wartbarkeit, Qualit√§t und Zusammenarbeit.

Selbst kleine Hilfsfunktionen lohnen sich oft als internes Package ‚Äì f√ºr konsistente und saubere Projekte.
